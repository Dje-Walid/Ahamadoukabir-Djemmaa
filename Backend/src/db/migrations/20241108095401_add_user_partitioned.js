/* eslint-disable max-lines-per-function */
// eslint-disable-next-line max-lines-per-function
export const up = async (knex) => {
  await knex.schema.table("mark", (table) => {
    table.dropForeign("evaluate_id")
    table.dropForeign("noted_id")
  })
  await knex.schema.table("message", (table) => {
    table.dropForeign("sender_id")
    table.dropForeign("receipt_id")
  })
  await knex.schema.table("comment", (table) => {
    table.dropForeign("author_id")
    table.dropForeign("consignee_id")
  })
  await knex.schema.table("like", (table) => {
    table.dropForeign("user_id")
  })
  await knex.schema.table("enrollment", (table) => {
    table.dropForeign("user_id")
  })
  await knex.schema.table("bring_game", (table) => {
    table.dropForeign("user_id")
  })
  await knex.schema.table("party", (table) => {
    table.dropForeign("arrange_id")
  })
  await knex.schema.dropTable("users")
  await knex.raw(`
    CREATE TABLE users (
      id BIGINT GENERATED BY DEFAULT AS IDENTITY,
      name TEXT,
      lastname TEXT,
      email TEXT,
      password_hash TEXT,
      password_salt TEXT,
      date_of_birth DATE,
      address_id BIGINT  not null REFERENCES address
    ) PARTITION BY RANGE (EXTRACT(YEAR FROM date_of_birth));
     CREATE INDEX ON users (address_id);
  `)
  await knex.schema.alterTable("mark", (table) => {
    table.index("evaluate_id")
    table.index("noted_id")
  })
  await knex.schema.alterTable("message", (table) => {
    table.index("sender_id")
    table.index("receipt_id")
  })
  await knex.schema.alterTable("comment", (table) => {
    table.index("author_id")
    table.index("consignee_id")
  })
  await knex.schema.alterTable("like", (table) => {
    table.index("user_id")
  })
  await knex.schema.alterTable("enrollment", (table) => {
    table.index("user_id")
  })
  await knex.schema.alterTable("party", (table) => {
    table.index("arrange_id")
  })
  await knex.raw(`
    CREATE TABLE users_1980s PARTITION OF users
    FOR VALUES FROM (1980) TO (1990);
  `)
  await knex.raw(`
    CREATE TABLE users_1990s PARTITION OF users
    FOR VALUES FROM (1990) TO (2000);
  `)
  await knex.raw(`
    CREATE TABLE users_2000s PARTITION OF users
    FOR VALUES FROM (2000) TO (2010);
  `)
  await knex.raw(`
    CREATE TABLE users_2010s PARTITION OF users
    FOR VALUES FROM (2010) TO (2020);
  `)
  await knex.raw(`
    CREATE TABLE users_2020s PARTITION OF users
    FOR VALUES FROM (2020) TO (2030);
  `)
}

export const down = async (knex) => {
  // Supprime les partitions de la table 'users'
  await knex.raw(`DROP TABLE IF EXISTS users_2020s`)
  await knex.raw(`DROP TABLE IF EXISTS users_2010s`)
  await knex.raw(`DROP TABLE IF EXISTS users_2000s`)
  await knex.raw(`DROP TABLE IF EXISTS users_1990s`)
  await knex.raw(`DROP TABLE IF EXISTS users_1980s`)
  // Supprimer les enregistrements orphelins dans chaque table

  await knex("like").delete()
  await knex("comment").delete()
  await knex("mark").delete()
  await knex("message").delete()
  await knex("enrollment").delete()
  await knex("bring_game").delete()
  await knex("party").delete()
  await knex("center_of_interest").delete()
  await knex("type_of_party").delete()
  await knex("users").delete()
  await knex("address").delete()

  await knex.schema.dropTableIfExists("users")
  await knex.schema.alterTable("mark", (table) => {
    table.dropIndex("evaluate_id")
    table.dropIndex("noted_id")
  })
  await knex.schema.alterTable("message", (table) => {
    table.dropIndex("sender_id")
    table.dropIndex("receipt_id")
  })
  await knex.schema.alterTable("comment", (table) => {
    table.dropIndex("author_id")
    table.dropIndex("consignee_id")
  })
  await knex.schema.alterTable("like", (table) => {
    table.dropIndex("user_id")
  })
  await knex.schema.alterTable("enrollment", (table) => {
    table.dropIndex("user_id")
  })
  await knex.schema.alterTable("party", (table) => {
    table.dropIndex("arrange_id")
  })
  await knex.schema.createTable("users", (table) => {
    table.increments("id")
    table.text("name")
    table.text("lastname")
    table.text("email")
    table.text("password_hash")
    table.text("password_salt")
    table.date("date_of_birth")
    table
      .bigInteger("address_id")
      .notNullable()
      .references("id")
      .inTable("address")
      .onDelete("CASCADE")
  })

  await knex.schema.table("mark", (table) => {
    table.foreign("evaluate_id").references("users.id")
    table.foreign("noted_id").references("users.id")
  })
  await knex.schema.table("message", (table) => {
    table.foreign("sender_id").references("users.id")
    table.foreign("receipt_id").references("users.id")
  })
  await knex.schema.table("comment", (table) => {
    table.foreign("author_id").references("users.id")
    table.foreign("consignee_id").references("users.id")
  })
  await knex.schema.table("like", (table) => {
    table.foreign("user_id").references("users.id")
  })
  await knex.schema.table("enrollment", (table) => {
    table.foreign("user_id").references("users.id")
  })
  await knex.schema.table("bring_game", (table) => {
    table.foreign("user_id").references("users.id")
  })
  await knex.schema.table("party", (table) => {
    table.foreign("arrange_id").references("users.id")
  })
}
